import abc

# Define a classe abstrata Conta
# Uma classe abstrata não pode ser instanciada diretamente
class Conta(abc.ABC):
  
    def __init__(self, numero, titular, saldo=0, limite=1000.0):
        self._numero = numero
        self._titular = titular
        self._saldo = saldo
        self._limite = limite
        # O atributo _tipo será definido nas subclasses concretas

    @property
    def numero(self):
        return self._numero

    @property
    def titular(self):
        return self._titular

    @property
    def saldo(self):
        return self._saldo

    @property
    def limite(self):
        return self._limite

    def deposita(self, valor):
        
        if valor > 0:
            self._saldo += valor
            print(f"Depósito de R${valor:.2f} realizado. Novo saldo: R${self._saldo:.2f}")
        else:
            print("O valor do depósito deve ser positivo.")

    def saca(self, valor):
        
        if valor <= 0:
            print("O valor do saque deve ser positivo.")
            return False
        if self._saldo + self._limite >= valor:
            self._saldo -= valor
            print(f"Saque de R${valor:.2f} realizado. Novo saldo: R${self._saldo:.2f}")
            return True
        else:
            print("Saldo insuficiente para realizar o saque.")
            return False

    @abc.abstractmethod
    def atualiza(self, taxa):
        
        pass

    def __str__(self):
      
        
        tipo_conta = getattr(self, '_tipo', 'Conta Genérica')
        return (f"Tipo: {tipo_conta}, Número: {self._numero}, "
                f"Titular: {self._titular}, Saldo: R${self._saldo:.2f}")


# Classe ContaCorrente que herda de Conta
class ContaCorrente(Conta):

    def __init__(self, numero, titular, saldo=0, limite=1000.0):
        super().__init__(numero, titular, saldo, limite)
        self._tipo = "Conta Corrente" # Atributo tipo

    def atualiza(self, taxa):
    
        self._saldo += self._saldo * taxa * 2
        print(f"Conta Corrente atualizada. Novo saldo: R${self._saldo:.2f}")


# Classe ContaPoupanca que herda de Conta
class ContaPoupanca(Conta):
   
    def __init__(self, numero, titular, saldo=0, limite=1000.0):
        super().__init__(numero, titular, saldo, limite)
        self._tipo = "Conta Poupança" # Atributo tipo

    def atualiza(self, taxa):
        """
        Atualiza o saldo da conta poupança.
        A taxa é aplicada três vezes.
        """
        self._saldo += self._saldo * taxa * 3
        print(f"Conta Poupança atualizada. Novo saldo: R${self._saldo:.2f}")


# Classe ContaInvestimento que herda de Conta
class ContaInvestimento(Conta):

    def __init__(self, numero, titular, saldo=0, limite=1000.0):
        super().__init__(numero, titular, saldo, limite)
        self._tipo = "Conta Investimento" # Atributo tipo

    def atualiza(self, taxa):
        """
        Atualiza o saldo da conta de investimento.
        A taxa é aplicada cinco vezes.
        """
        self._saldo += self._saldo * taxa * 5
        print(f"Conta Investimento atualizada. Novo saldo: R${self._saldo:.2f}")


# Bloco principal para testes
if __name__ == '__main__':
    print("--- Tentando instanciar uma Conta (abstrata) ---")
  
    print("Não é possível instanciar a classe 'Conta' diretamente, pois ela é abstrata.")
    print("Isso resultaria em um 'TypeError'.")
    print("-" * 50)

    print("--- Instanciando e testando ContaCorrente e ContaPoupanca ---")
    cc = ContaCorrente('123-4', 'João', 1000.0)
    cp = ContaPoupanca('123-5', 'José', 1000.0)

    print(f"Saldo inicial CC: R${cc.saldo:.2f}")
    print(f"Saldo inicial CP: R${cp.saldo:.2f}")

    taxa_atualizacao = 0.01 # 1%
    cc.atualiza(taxa_atualizacao)
    cp.atualiza(taxa_atualizacao)

    print(f"Saldo final CC: R${cc.saldo:.2f}")
    print(f"Saldo final CP: R${cp.saldo:.2f}")
    print("-" * 50)

    print("--- Tentando instanciar ContaInvestimento sem implementar atualiza() ---")
   
    print("Se 'ContaInvestimento' não implementasse 'atualiza()', não seria possível instanciá-la.")
    print("Isso também resultaria em um 'TypeError'.")
    print("-" * 50)

    print("--- Instanciando e testando ContaInvestimento com atualiza() implementado ---")
    ci = ContaInvestimento('123-6', 'Maria', 1000)
    print(f"Saldo inicial CI: R${ci.saldo:.2f}")
    ci.deposita(1000.0) # Saldo passa para 2000.0
    ci.atualiza(taxa_atualizacao) # Saldo atualiza com a taxa de investimento
    print(f"Saldo final CI: R${ci.saldo:.2f}")
    print("-" * 50)

    print("--- Testando a impressão do tipo de conta (com __str__ sobrescrito) ---")
    print(cc)
    print(cp)
    print(ci)
    print("-" * 50)
