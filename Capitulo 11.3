class Conta:
    def __init__(self, numero, titular, saldo=0):
        self.numero = numero
        self.titular = titular
        self._saldo = saldo

    def atualiza(self, taxa):
        self._saldo += self._saldo * taxa
        return self._saldo

    @property
    def saldo(self):
        return self._saldo

    def __str__(self):
        return f"Dados da Conta:\nNumero: {self.numero}\nTitular: {self.titular}\nSaldo: {self._saldo}"

class ContaCorrente(Conta):
    def atualiza(self, taxa):
        self._saldo += self._saldo * taxa * 2
        return self._saldo

    def deposita(self, valor):
        self._saldo += valor - 0.10

class ContaPoupanca(Conta):
    def atualiza(self, taxa):
        self._saldo += self._saldo * taxa * 3
        return self._saldo

class AtualizadorDeContas:
    def __init__(self, selic, saldo_total=0):
        self._selic = selic
        self._saldo_total = saldo_total

    @property
    def saldo_total(self):
        return self._saldo_total

    def roda(self, conta):
        print("Saldo da Conta: {}".format(conta.saldo))
        self._saldo_total += conta.atualiza(self._selic)
        print("Saldo Final: {}".format(self._saldo_total))

class Banco:
    def __init__(self):
        self._contas = []

    def adiciona(self, conta):
        self._contas.append(conta)

    def pegaConta(self, posicao):
        return self._contas[posicao]

    def pegaTotalDeContas(self):
        return len(self._contas)

if __name__ == '__main__':
    banco = Banco()
    contas = [
        Conta('123-1', 'Joao', 1000.0),
        ContaCorrente('123-2', 'Jose', 1500.0),
        ContaPoupanca('123-3', 'Maria', 2000.0),
        ContaCorrente('123-4', 'Ana', 1200.0),
        ContaPoupanca('123-5', 'Paulo', 1800.0)
    ]

    for conta in contas:
        banco.adiciona(conta)

    adc = AtualizadorDeContas(0.01)

    for i in range(banco.pegaTotalDeContas()):
        conta = banco.pegaConta(i)
        adc.roda(conta)

    print('Saldo total: {}'.format(adc.saldo_total))
